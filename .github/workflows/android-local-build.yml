name: Android CI (Release Build)

on:
  workflow_dispatch:
  push:
    branches: [develop, feat/jwt-auth]
  pull_request:
    branches: [develop, feat/jwt-auth]

jobs:
  android-release:
    runs-on: ubuntu-latest
    env:
      TRX_RELEASE_BASE_URL: ${{ secrets.TRX_RELEASE_BASE_URL }}
      LOOKUP_RELEASE_BASE_URL: ${{ secrets.LOOKUP_RELEASE_BASE_URL }}
      ANDROID_KEYSTORE_B64: ${{ secrets.ANDROID_KEYSTORE_B64 }}
      ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}

    steps:
      # 1) Checkout
      - name: Checkout code
        uses: actions/checkout@v4

      # 2) Node
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Optional: npm cache
      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('mon-app-frontend/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-

      # 3) Install JS deps
      - name: Install frontend dependencies
        working-directory: mon-app-frontend
        run: npm ci

      # 4) Write .env for Expo (public vars baked into bundle)
      - name: Create .env (Expo public vars)
        working-directory: mon-app-frontend
        shell: bash
        run: |
          echo "EXPO_PUBLIC_TRX_API_BASE_URL=${TRX_RELEASE_BASE_URL}" > .env
          if [ -n "${LOOKUP_RELEASE_BASE_URL}" ]; then
            echo "EXPO_PUBLIC_LOOKUP_API_BASE_URL=${LOOKUP_RELEASE_BASE_URL}" >> .env
          fi
          echo "HTTPS=false" >> .env
          echo "Wrote .env:" && cat .env

      # 5) Generate native Android project
      - name: Expo prebuild (android, clean)
        working-directory: mon-app-frontend
        run: npx expo prebuild --platform android --clean

      # (Optional) Keep cleartext in release for LAN QA; remove later for prod HTTPS-only
      - name: Ensure cleartext HTTP for LAN
        working-directory: mon-app-frontend
        shell: bash
        run: |
          MANIFEST="android/app/src/main/AndroidManifest.xml"
          mkdir -p android/app/src/main/res/xml
          cat > android/app/src/main/res/xml/network_security_config.xml <<'XML'
          <?xml version="1.0" encoding="utf-8"?>
          <network-security-config>
            <base-config cleartextTrafficPermitted="true" />
          </network-security-config>
          XML
          if ! grep -q 'usesCleartextTraffic="true"' "$MANIFEST"; then
            sed -i '0,/<application /s//<application android:usesCleartextTraffic="true" /' "$MANIFEST"
          fi
          if ! grep -q 'networkSecurityConfig="@xml/network_security_config"' "$MANIFEST"; then
            sed -i '0,/<application /s//<application android:networkSecurityConfig="@xml\/network_security_config" /' "$MANIFEST"
          fi

      # 6) Java (AGP 8.8.x wants JDK 17)
      - name: Setup Java (JDK 17)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 7) Android SDK base (platform + build-tools)
      - name: Setup Android SDK (API 35 / build-tools 35.0.0)
        uses: android-actions/setup-android@v3
        with:
          api-level: 35
          build-tools: '35.0.0'
          ndk: ''       # we'll install NDK explicitly below
          cmake: false

      # 7.1) Accept licenses (prevents sdkmanager prompts)
      - name: Accept SDK licenses
        run: yes | "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager" --licenses

      # 7.2) Install exact NDK and export env (matches your successful develop logs)
      - name: Install NDK r27.1.12297006 and export env
        shell: bash
        run: |
          "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager" "ndk;27.1.12297006" || true
          ls -la "${ANDROID_SDK_ROOT}/ndk" || true
          echo "ANDROID_NDK_HOME=${ANDROID_SDK_ROOT}/ndk/27.1.12297006" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=${ANDROID_SDK_ROOT}/ndk/27.1.12297006" >> $GITHUB_ENV

      # 7.3) Pin NDK in gradle.properties so Gradle never tries to auto-install
      - name: Pin android.ndkVersion in gradle.properties
        working-directory: mon-app-frontend/android
        shell: bash
        run: |
          GP="gradle.properties"
          if grep -q '^android.ndkVersion=' "$GP"; then
            sed -i 's/^android.ndkVersion=.*/android.ndkVersion=27.1.12297006/' "$GP"
          else
            echo -e "\nandroid.ndkVersion=27.1.12297006" >> "$GP"
          fi
          echo "==== gradle.properties (snippet) ===="
          grep -E '^(org.gradle.jvmargs|reactNativeArchitectures|newArchEnabled|hermesEnabled|android.ndkVersion)=' "$GP" || true

      # 8) Decode keystore and expose Gradle envs
      - name: Decode keystore & set signing env
        working-directory: mon-app-frontend/android/app
        shell: bash
        run: |
          echo "$ANDROID_KEYSTORE_B64" | base64 -d > release.keystore
          echo "ANDROID_STORE_FILE=$(pwd)/release.keystore" >> $GITHUB_ENV
          echo "ANDROID_KEYSTORE_PASSWORD=${ANDROID_KEYSTORE_PASSWORD}" >> $GITHUB_ENV
          echo "ANDROID_KEY_ALIAS=${ANDROID_KEY_ALIAS}" >> $GITHUB_ENV
          echo "ANDROID_KEY_PASSWORD=${ANDROID_KEY_PASSWORD}" >> $GITHUB_ENV
          ls -l release.keystore

      - name: Make gradlew executable
        working-directory: mon-app-frontend/android
        run: chmod +x ./gradlew

      # Optional: Gradle cache
      - name: Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('mon-app-frontend/android/**/*.gradle*', 'mon-app-frontend/android/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # 9) Clean & build Release (APK + AAB)
      - name: Gradle clean
        working-directory: mon-app-frontend/android
        run: ./gradlew clean --no-daemon --stacktrace

      - name: Assemble Release APK
        working-directory: mon-app-frontend/android
        run: ./gradlew assembleRelease --no-daemon --stacktrace

      - name: Bundle Release AAB
        working-directory: mon-app-frontend/android
        run: ./gradlew bundleRelease --no-daemon --stacktrace

      # 10) Upload artifacts
      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: android-release-apk
          path: mon-app-frontend/android/app/build/outputs/apk/release/app-release.apk

      - name: Upload Release AAB
        uses: actions/upload-artifact@v4
        with:
          name: android-release-aab
          path: mon-app-frontend/android/app/build/outputs/bundle/release/app-release.aab
