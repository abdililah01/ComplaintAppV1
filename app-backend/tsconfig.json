{
  "compilerOptions": {
    /* Base Options: */
    "esModuleInterop": true, /* Permet la compatibilité entre les modules CommonJS (require) et ES (import). CRUCIAL pour Express. */
    "skipLibCheck": true, /* Ignore la vérification des types dans les fichiers de déclaration (.d.ts), ce qui accélère la compilation. */
    "target": "es2016", /* Cible la version de JavaScript émise. ES2016 est un standard stable et largement compatible. */
    "forceConsistentCasingInFileNames": true, /* Impose que les noms de fichiers dans les imports aient la bonne casse. Prévient des bugs sur les systèmes sensibles à la casse comme Linux. */
    "moduleDetection": "force", /* Assure que TypeScript traite chaque fichier comme un module, ce qui est le comportement attendu. */

    /* Strict Type-Checking Options: */
    "strict": true, /* Active toutes les règles de vérification de type strictes. C'est la raison principale de l'utilisation de TypeScript. */

    /* Module Resolution Options: */
    "module": "commonjs", /* Spécifie que le code JavaScript généré doit utiliser le système de modules CommonJS (celui utilisé par Node.js). */
    "resolveJsonModule": true, /* Permet d'importer des fichiers .json directement dans le code. */

    /* Output Directory Options: */
    "outDir": "./dist", /* Spécifie que le résultat de la compilation (npm run build) sera placé dans le dossier 'dist'. */
    "rootDir": "./src" /* Spécifie que la racine de notre code source est le dossier 'src'. */
  },
  "include": [
    "src/**/*",
    "tests/**/*"/* Indique à TypeScript de compiler tous les fichiers se trouvant dans le dossier 'src'. */
  ],
  "exclude": [
    "node_modules", /* Indique à TypeScript d'ignorer le dossier node_modules. */
    "dist" /* Indique à TypeScript d'ignorer le dossier de sortie pour éviter les boucles de compilation. */
  ]
}