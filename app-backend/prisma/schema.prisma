// Fichier: /app-backend/prisma/schema.prisma (FINAL v3 - Syntaxe d'index corrigée)

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- TABLES DE RÉFÉRENCE ---

model Pays {
  Id               Int                @id @map("Id")
  Nom              String             @db.NVarChar(400)
  Code             String?            @db.NVarChar(40)
  Nom_Fr           String?            @db.NVarChar(400)
  Nationalite      String?            @db.NVarChar(60)
  Ville            Ville[]
  PersonnePhysique PersonnePhysique[]
  @@map("Pays")
}

model Ville {
  Id               Int                @id @map("Id")
  Nom              String             @db.NVarChar(120)
  IdPays           Int
  CodePostal       String?            @db.NVarChar(20)
  Nom_Fr           String?            @db.NVarChar(120)
  pays             Pays               @relation(fields: [IdPays], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  PersonnePhysique PersonnePhysique[]
  @@index([IdPays])
  @@map("Ville")
}

model SituationResidence {
  Id               Int                @id @map("Id")
  Libelle          String             @db.NVarChar(60)
  PersonnePhysique PersonnePhysique[]
  @@map("SituationResidence")
}

model Profession {
  Id               Int                @id @map("Id")
  Libelle          String             @db.NVarChar(120)
  PersonnePhysique PersonnePhysique[]
  @@map("Profession")
}

model Juridiction {
  Id             Int              @id @map("Id")
  Nom            String           @db.NVarChar(200)
  Affichable     Boolean          @db.Bit
  PersonneMorale PersonneMorale[]
  Plainte        Plainte[]
  @@map("Juridiction")
}

model ObjetInjustice {
  IdObjetInjustice Int      @id @map("IdObjetInjustice")
  Libelle          String   @db.NVarChar(120)
  Plainte          Plainte[]
  @@map("ObjetInjustice")
}

model RolePlainte {
  IdRolePlainte Int                 @id @map("IdRolePlainte")
  Libelle       String              @db.NVarChar(60)
  roles         RolePartiePlainte[]
  @@map("RolePlainte")
}

// --- TABLES TRANSACTIONNELLES ---

model PersonnePhysique {
  Id                   BigInt               @id @map("Id")
  Nom                  String               @db.NVarChar(600)
  Prenom               String               @db.NVarChar(600)
  Sexe                 String               @db.Char(1)
  IdSituationResidence Int
  CIN                  String?              @db.NVarChar(100)
  IdProfession         Int
  IdPays               Int
  IdVille              Int
  IsCultive            Boolean              @db.Bit
  SessionId            String?              @db.NVarChar(500)
  AdressePrimaire      String?              @db.NVarChar(1998)
  DateNaissance        DateTime?            @db.DateTime
  pays                 Pays                 @relation(fields: [IdPays], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  ville                Ville                @relation(fields: [IdVille], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  situationResidence   SituationResidence   @relation(fields: [IdSituationResidence], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  profession           Profession           @relation(fields: [IdProfession], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  Partie               Partie[]
  // CORRECTION: Syntaxe correcte pour plusieurs index
  @@index([IdPays])
  @@index([IdVille])
  @@map("PersonnePhysique")
}

model PersonneMorale {
  Id                      BigInt        @id @map("Id")
  NomCommercial           String        @db.NVarChar(600)
  NumeroRC                String?       @db.NVarChar(100)
  IdJuridiction           Int?
  NomRepresentantLegal    String?       @db.NVarChar(600)
  PrenomRepresentantLegal String?       @db.NVarChar(600)
  SessionId               String?       @db.NVarChar(500)
  EnseigneSociale         String?       @db.NVarChar(1000)
  juridiction             Juridiction?  @relation(fields: [IdJuridiction], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  Partie                  Partie[]
  @@index([IdJuridiction])
  @@map("PersonneMorale")
}

model Partie {
  Id                 BigInt              @id @map("Id")
  TypePersonne       String              @db.Char(1)
  Telephone          String?             @db.VarChar(30)
  Email              String?             @db.VarChar(200)
  IdPersonnePhysique BigInt?
  IdPersonneMorale   BigInt?
  IsInconnu          Boolean             @db.Bit
  SessionId          String?             @db.NVarChar(500)
  personnePhysique   PersonnePhysique?   @relation(fields: [IdPersonnePhysique], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  personneMorale     PersonneMorale?     @relation(fields: [IdPersonneMorale], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  roles              RolePartiePlainte[]
  @@map("Partie")
}

model Plainte {
  Id               BigInt              @id @map("Id")
  DatePlainte      DateTime            @db.DateTime
  IdObjetInjustice Int
  IdJuridiction    Int
  CodeSuivi        String?             @db.NVarChar(100)
  ResumePlainte    String?
  objetInjustice   ObjetInjustice      @relation(fields: [IdObjetInjustice], references: [IdObjetInjustice], onDelete: NoAction, onUpdate: NoAction)
  juridiction      Juridiction         @relation(fields: [IdJuridiction], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  pieces           PieceJointe[]
  roles            RolePartiePlainte[]
  CodeSMS          CodeSMS[]
  @@index([IdObjetInjustice])
  @@index([IdJuridiction])
  @@map("plainte")
}

model RolePartiePlainte {
  IdRolePartiePlainte BigInt      @id
  IdPartie            BigInt
  IdPlainte           BigInt
  IdRolePlainte       Int
  partie              Partie      @relation(fields: [IdPartie], references: [Id], onDelete: NoAction, onUpdate: NoAction)
  plainte             Plainte     @relation(fields: [IdPlainte], references: [Id], onDelete: Cascade)
  role                RolePlainte @relation(fields: [IdRolePlainte], references: [IdRolePlainte], onDelete: NoAction, onUpdate: NoAction)
  @@index([IdPlainte])
  @@map("RolePartiePlainte")
}

model PieceJointe {
  Id              BigInt  @id @map("Id")
  Contenu         Bytes?
  IdPlainte       BigInt
  SessionId       String? @db.VarChar(500)
  extensionPJ     String? @db.NVarChar(100)
  TypePieceJointe Int?
  plainte         Plainte @relation(fields: [IdPlainte], references: [Id], onDelete: Cascade)
  @@index([IdPlainte])
  @@map("PieceJointe")
}

model CodeSMS {
  IdCode        Int       @id @map("IdCode")
  IdPlainte     BigInt
  IdSession     String?   @db.NVarChar(510)
  NumeroTel     String?   @db.NVarChar(510)
  Tentative     Int?
  DateEnvoiCode DateTime? @db.DateTime
  Valide        String?   @db.NVarChar(510)
  Code          String?   @db.NVarChar(12)
  plainte       Plainte   @relation(fields: [IdPlainte], references: [Id], onDelete: Cascade)
  @@index([IdPlainte])
  @@map("CodeSMS")
}